openapi: 3.1.0
info:
  title: Decentraland Marketplace Server API
  description: |
    API for Decentraland Marketplace server providing NFT trading, catalog browsing, favorites management, 
    and marketplace analytics. This API supports various blockchain networks and provides comprehensive 
    functionality for managing NFTs, wearables, emotes, and LAND in the Decentraland metaverse.
  version: 1.0.0
  contact:
    name: Decentraland
    url: https://decentraland.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-api-id: marketplace-server-api
servers:
  - url: https://marketplace-api.decentraland.org
    description: Production server
  - url: https://marketplace-api.decentraland.zone
    description: Development server
security: []
tags:
  - name: Health
    description: Health check and service status endpoints
  - name: Catalog
    description: Browse and search marketplace catalog items
  - name: Trades
    description: Manage and view trading activity
  - name: NFTs
    description: Query and manage NFTs including wearables, emotes, and LAND
  - name: Items
    description: View marketplace items and collections
  - name: Orders
    description: Manage marketplace orders
  - name: Bids
    description: View and manage bids on marketplace items
  - name: Sales
    description: Query sales history and transactions
  - name: Prices
    description: Get current marketplace prices
  - name: Trending
    description: View trending items and collections
  - name: Statistics
    description: Access marketplace statistics and analytics
  - name: Rankings
    description: View marketplace rankings by various metrics
  - name: Volume
    description: Query trading volume data
  - name: Lists
    description: Manage user favorites lists (curated collections)
  - name: Picks
    description: Manage picks within favorites lists
  - name: Payments
    description: Payment gateway integration (Wert, Transak)
  - name: ENS
    description: ENS (Ethereum Name Service) utilities
paths:
  /ping:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: |
        Simple health check endpoint that returns "pong" when the service is running and healthy.
        Used for monitoring and load balancer health checks.
      operationId: ping
      security: []
      responses:
        '200':
          description: Service is healthy and responding
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/catalog:
    get:
      tags:
        - Catalog
      summary: Get marketplace catalog (v1)
      description: |
        Retrieves the marketplace catalog with items available for browsing and purchase.
        Supports filtering by category, price range, and various item attributes.
        Authentication is optional but recommended for personalized results.
        
        **Note**: Consider using /v2/catalog for enhanced features and performance.
      operationId: getCatalog
      security:
        - SignedFetch: []
        - {}
      responses:
        '200':
          description: Marketplace catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/catalog:
    get:
      tags:
        - Catalog
      summary: Get marketplace catalog (v2 - Recommended)
      description: |
        Retrieves the marketplace catalog with enhanced filtering and sorting capabilities.
        Supports comprehensive filtering by:
        - Categories (wearables, emotes)
        - Price ranges and sorting (newest, cheapest, most expensive, recently sold)
        - Rarities and creator addresses
        - Wearable-specific filters (gender, category, accessories)
        - Emote-specific filters (category, play mode)
        - Text search across item names and descriptions
        
        Authentication is optional but may provide personalized results and user-specific data.
      operationId: getCatalogV2
      security:
        - SignedFetch: []
        - {}
      responses:
        '200':
          description: Marketplace catalog v2
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/wert/sign:
    post:
      tags:
        - Payments
      summary: Sign Wert payment transaction
      description: |
        Signs a transaction for Wert payment gateway integration.
        Wert is a fiat-to-crypto payment solution that allows users to purchase NFTs with credit/debit cards.
        This endpoint validates and signs the transaction data before forwarding to Wert's infrastructure.
        
        Authentication is optional but recommended for tracking user transactions.
      operationId: signWertTransaction
      security:
        - SignedFetch: []
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WertSignRequest'
      responses:
        '200':
          description: Signed transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WertSignResponse'
  /v1/transak/orders/{id}:
    get:
      tags:
        - Payments
      summary: Get Transak order details
      description: |
        Retrieves detailed information about a Transak payment order.
        Transak is a fiat-to-crypto payment gateway that enables credit/debit card purchases.
        
        Use this endpoint to check order status, amount, currency, and completion details.
        Authentication is optional but may provide access to user-specific order information.
      operationId: getTransakOrder
      security:
        - SignedFetch: []
        - {}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique Transak order identifier
      responses:
        '200':
          description: Transak order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransakOrder'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/ens/generate:
    get:
      tags:
        - ENS
      summary: Generate ENS name image
      description: |
        Generates a visual representation (image) for an ENS (Ethereum Name Service) name.
        This is typically used to create profile images or avatar representations for ENS domains
        in the Decentraland marketplace.
        
        The generated image can be used as a preview or thumbnail for ENS-based NFTs.
      operationId: generateENSImage
      security: []
      responses:
        '200':
          description: Generated ENS image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ENSImageResponse'
  /v1/trades:
    get:
      tags:
        - Trades
      summary: List marketplace trades
      description: |
        Retrieves a paginated list of trades in the marketplace.
        Trades represent peer-to-peer exchanges between users, including offers and accepted deals.
        
        Use pagination parameters (limit and offset) to navigate through large result sets.
        Results are typically ordered by creation date (most recent first).
      operationId: getTrades
      security: []
      parameters:
        - name: limit
          in: query
          required: false
          description: 'Maximum number of trades to return per request (default: 20, max: 100)'
          schema:
            type: number
        - name: offset
          in: query
          required: false
          description: 'Number of trades to skip for pagination (default: 0)'
          schema:
            type: number
      responses:
        '200':
          description: List of trades
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trade'
    post:
      tags:
        - Trades
      summary: Create a new trade
      description: |
        Creates a new trade offer in the marketplace.
        
        **Authentication Required**: This endpoint requires Decentraland authentication with signed metadata.
        The authentication validates:
        - User identity via signed message (ADR-44l)
        - Authorized origins (dcl:marketplace or dcl:builder)
        - Metadata intent (dcl:create-trade)
        
        The trade will be validated against blockchain data and marketplace rules before creation.
      operationId: createTrade
      security:
        - SignedFetch: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTradeRequest'
      responses:
        '201':
          description: Trade created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trade'
        '401':
          description: Unauthorized - invalid signed fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - invalid metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/trades/{id}:
    get:
      tags:
        - Trades
      summary: Get trade by ID
      description: |
        Retrieves detailed information about a specific trade including:
        - Trade participants (buyer and seller)
        - Item details and metadata
        - Trade price and currency
        - Current status (pending, completed, or cancelled)
        - Timestamps (creation, updates, completion)
      operationId: getTrade
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique trade identifier
      responses:
        '200':
          description: Trade details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trade'
        '404':
          description: Trade not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/trades/{hashedSignature}/accept:
    get:
      tags:
        - Trades
      summary: Get trade acceptance event
      description: |
        Retrieves information about a trade acceptance event using the hashed signature.
        This endpoint is used to verify and track when a trade offer was accepted on-chain.
        
        The hashed signature serves as a unique identifier linking the off-chain trade
        to its blockchain transaction acceptance event.
      operationId: getTradeAcceptedEvent
      security: []
      parameters:
        - name: hashedSignature
          in: path
          required: true
          schema:
            type: string
          description: Keccak-256 hashed signature of the trade acceptance transaction
      responses:
        '200':
          description: Trade accepted event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeAcceptedEvent'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/bids:
    get:
      tags:
        - Bids
      summary: List marketplace bids
      description: |
        Retrieves a paginated list of bids placed on marketplace items.
        Bids represent offers made by potential buyers on NFTs and items.
        
        Supports filtering by:
        - Contract address and item ID
        - Bid status (active, accepted, rejected)
        - Bidder and seller addresses
        
        Results include bid amounts, timestamps, and current status.
      operationId: getBids
      security: []
      parameters:
        - name: limit
          in: query
          required: false
          description: 'Maximum number of bids to return per request (default: 20, max: 100)'
          schema:
            type: number
        - name: offset
          in: query
          required: false
          description: 'Number of bids to skip for pagination (default: 0)'
          schema:
            type: number
      responses:
        '200':
          description: List of bids
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bid'
  /v1/nfts:
    get:
      tags:
        - NFTs
      summary: List and search NFTs
      description: |
        Retrieves NFTs from the Decentraland marketplace with comprehensive filtering capabilities.
        
        Supports multiple NFT types:
        - Wearables (clothing, accessories)
        - LAND parcels and Estates
        - ENS names
        - Emotes
        
        Advanced filtering options:
        - Ownership and sale status
        - Categories and search text
        - Price ranges
        - LAND-specific: distance to plaza, adjacent to roads, estate size
        - Rental status for LAND parcels
        - Network selection (Ethereum mainnet, Polygon)
        - Sort by: newest, recently listed, price
        
        Authentication is optional but provides access to user-specific data like favorites.
      operationId: getNFTs
      security:
        - SignedFetch: []
        - {}
      parameters:
        - name: limit
          in: query
          required: false
          description: 'Maximum number of NFTs to return (default: 20, max: 100)'
          schema:
            type: number
        - name: offset
          in: query
          required: false
          description: 'Number of NFTs to skip for pagination (default: 0)'
          schema:
            type: number
      responses:
        '200':
          description: List of NFTs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NFT'
  /v1/orders:
    get:
      tags:
        - Orders
      summary: List marketplace orders
      description: |
        Retrieves marketplace orders (listings) for NFTs and items.
        Orders represent sell listings created by item owners.
        
        Filter options:
        - Contract address and item ID
        - Order status (open, filled, cancelled)
        - Owner (seller) or buyer addresses
        - Network (Ethereum, Polygon)
        - Sort by price (cheapest first)
        
        Use this endpoint to find available items for purchase and their pricing.
      operationId: getOrders
      security: []
      parameters:
        - name: limit
          in: query
          required: false
          description: 'Maximum number of orders to return (default: 20, max: 100)'
          schema:
            type: number
        - name: offset
          in: query
          required: false
          description: 'Number of orders to skip for pagination (default: 0)'
          schema:
            type: number
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /v1/items:
    get:
      tags:
        - Items
      summary: List marketplace items
      description: |
        Retrieves items from marketplace collections.
        Items are templates/blueprints for NFTs in collections (e.g., wearable designs, emote templates).
        
        Filter capabilities:
        - Specific contract address and item ID
        - Category (wearable, emote, etc.)
        - Creator address
        - Sale and sold-out status
        - Search by name or description
        - Wearable filters: category, gender, smart wearables
        - Emote filters: category, play mode
        - Network selection
        
        Authentication is optional and may provide personalized results.
      operationId: getItems
      security:
        - SignedFetch: []
        - {}
      parameters:
        - name: limit
          in: query
          required: false
          description: 'Maximum number of items to return (default: 20, max: 100)'
          schema:
            type: number
        - name: offset
          in: query
          required: false
          description: 'Number of items to skip for pagination (default: 0)'
          schema:
            type: number
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
  /v1/sales:
    get:
      tags:
        - Sales
      summary: List completed sales
      description: |
        Retrieves historical sales transactions from the marketplace.
        Sales represent completed purchases of NFTs and items.
        
        Use this endpoint to:
        - Track sales history and market activity
        - Analyze price trends
        - View transaction details (buyer, seller, price, timestamp)
        
        Filter options:
        - Category (wearable, emote, etc.)
        - Contract address and item ID
        - Network (Ethereum, Polygon)
        - Sort by: recently sold, price
      operationId: getSales
      security: []
      parameters:
        - name: limit
          in: query
          required: false
          description: 'Maximum number of sales to return (default: 20, max: 100)'
          schema:
            type: number
        - name: offset
          in: query
          required: false
          description: 'Number of sales to skip for pagination (default: 0)'
          schema:
            type: number
      responses:
        '200':
          description: List of sales
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'
  /v1/prices:
    get:
      tags:
        - Prices
      summary: Get current market prices
      description: |
        Retrieves current cryptocurrency and token price information used in the marketplace.
        
        Returns price data for:
        - MANA (Decentraland's native token)
        - ETH (Ethereum)
        - Other supported currencies
        
        Prices are typically provided in USD and updated regularly.
        Use this endpoint to display current conversion rates and calculate fiat equivalents.
      operationId: getPrices
      security: []
      responses:
        '200':
          description: Price information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricesResponse'
  /v1/trendings:
    get:
      tags:
        - Trending
      summary: Get trending marketplace items
      description: |
        Retrieves currently trending items in the marketplace based on various metrics.
        
        Trending scores are calculated from:
        - Recent sales volume
        - Number of views and interactions
        - Price movements
        - Time-weighted activity
        
        Use this endpoint to display popular items and identify market trends.
        Results are updated periodically and represent the most active items in the marketplace.
      operationId: getTrendings
      security: []
      responses:
        '200':
          description: Trending items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrendingItem'
  /v1/stats/{category}/{stat}:
    get:
      tags:
        - Statistics
      summary: Get marketplace statistics
      description: |
        Retrieves specific statistical data for marketplace categories.
        
        Common categories:
        - wearable: Statistics for wearable items
        - emote: Statistics for emotes
        - land: Statistics for LAND parcels
        - ens: Statistics for ENS names
        
        Common stat types:
        - sales_volume: Total sales volume in specified timeframe
        - average_price: Average sale price
        - unique_buyers: Number of unique buyers
        - unique_sellers: Number of unique sellers
        
        Use this endpoint for analytics dashboards and market insights.
      operationId: getStats
      security: []
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
            enum: [wearable, emote, land, ens, all]
          description: Item category for statistics (e.g., wearable, emote, land)
        - name: stat
          in: path
          required: true
          schema:
            type: string
          description: Type of statistic to retrieve (e.g., sales_volume, average_price)
      responses:
        '200':
          description: Statistics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'
  /v1/rankings/{entity}/{timeframe}:
    get:
      tags:
        - Rankings
      summary: Get marketplace rankings
      description: |
        Retrieves ranked lists of marketplace entities based on various metrics and timeframes.
        
        Entity types:
        - collections: Top-performing collections
        - creators: Most active or highest-earning creators
        - items: Best-selling items
        - sellers: Top sellers by volume
        
        Timeframes:
        - day: Last 24 hours
        - week: Last 7 days
        - month: Last 30 days
        - all: All-time rankings
        
        Rankings are calculated based on sales volume, transaction count, and other relevant metrics.
      operationId: getRankings
      security: []
      parameters:
        - name: entity
          in: path
          required: true
          schema:
            type: string
            enum: [collections, creators, items, sellers]
          description: Type of entity to rank (collections, creators, items, sellers)
        - name: timeframe
          in: path
          required: true
          schema:
            type: string
            enum: [day, week, month, all]
          description: Time period for rankings (day, week, month, all)
      responses:
        '200':
          description: Rankings data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RankingsResponse'
  /v1/volume/{timeframe}:
    get:
      tags:
        - Volume
      summary: Get trading volume data
      description: |
        Retrieves total trading volume for the marketplace within a specified timeframe.
        
        Volume metrics include:
        - Total sales amount (in MANA and USD)
        - Number of transactions
        - Unique traders (buyers and sellers)
        
        Available timeframes:
        - day: Last 24 hours
        - week: Last 7 days
        - month: Last 30 days
        - all: All-time volume
        
        Use this data for market health monitoring and trend analysis.
      operationId: getVolume
      security: []
      parameters:
        - name: timeframe
          in: path
          required: true
          schema:
            type: string
            enum: [day, week, month, all]
          description: Time period for volume calculation (day, week, month, all)
      responses:
        '200':
          description: Volume data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeResponse'
  /v1/lists/{id}/picks:
    get:
      tags:
        - Lists
        - Picks
      summary: Get picks from a favorites list
      description: |
        Retrieves all items (picks) that have been added to a specific favorites list.
        Lists are user-curated collections of marketplace items.
        
        Authentication is optional but recommended to access private lists or user-specific data.
      operationId: getListPicks
      security:
        - SignedFetch: []
        - {}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the favorites list
      responses:
        '200':
          description: List picks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pick'
    post:
      tags:
        - Lists
        - Picks
      summary: Add item to favorites list
      description: |
        Adds an item (pick) to a user's favorites list.
        
        **Authentication Required**: User must be authenticated and authorized to modify the list.
        Only list owners and users with granted access can add items.
      operationId: addPickToList
      security:
        - SignedFetch: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the favorites list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPickRequest'
      responses:
        '201':
          description: Pick added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pick'
        '401':
          description: Unauthorized - invalid signed fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - invalid metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/lists/{id}/picks/{itemId}:
    delete:
      tags:
        - Lists
        - Picks
      summary: Remove item from favorites list
      description: |
        Removes a specific item (pick) from a favorites list.
        
        **Authentication Required**: User must be authenticated and authorized to modify the list.
        Only list owners and users with granted access can remove items.
      operationId: removePickFromList
      security:
        - SignedFetch: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the favorites list
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the item to remove
      responses:
        '200':
          description: Pick removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '401':
          description: Unauthorized - invalid signed fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - invalid metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/picks/{itemId}/stats:
    get:
      tags:
        - Picks
      summary: Get statistics for a specific item
      description: |
        Retrieves pick statistics for a specific marketplace item.
        
        Returns:
        - Total number of times the item has been picked (added to lists)
        - Number of different lists containing this item
        - Popularity metrics
        
        Authentication is optional but may provide additional user-specific data.
      operationId: getPickStats
      security:
        - SignedFetch: []
        - {}
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the marketplace item
      responses:
        '200':
          description: Pick statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickStats'
  /v1/picks/stats:
    get:
      tags:
        - Picks
      summary: Get global pick statistics
      description: |
        Retrieves aggregated statistics across all picks in the marketplace.
        
        Returns:
        - Total number of picks across all lists
        - Total number of unique items that have been picked
        - Total number of active lists
        
        Use this endpoint for global marketplace analytics and engagement metrics.
      operationId: getAllPicksStats
      security: []
      responses:
        '200':
          description: All picks statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllPicksStats'
  /v1/picks/{itemId}:
    get:
      tags:
        - Picks
      summary: Get all picks for a specific item
      description: |
        Retrieves all pick instances for a specific marketplace item.
        Shows which lists contain this item and associated pick metadata.
        
        Authentication is optional but may provide access to private lists if the user has permissions.
      operationId: getPicksForItem
      security:
        - SignedFetch: []
        - {}
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the marketplace item
      responses:
        '200':
          description: Item picks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pick'
    post:
      tags:
        - Picks
      summary: Bulk pick/unpick operation
      description: |
        Adds or removes an item from multiple favorites lists in a single operation.
        
        **Authentication Required**: User must be authenticated and authorized.
        
        Use cases:
        - Add an item to multiple lists at once
        - Remove an item from multiple lists at once
        
        This is more efficient than making individual pick/unpick requests when managing multiple lists.
      operationId: bulkPickUnpick
      security:
        - SignedFetch: []
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the marketplace item to pick/unpick
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkPickRequest'
      responses:
        '200':
          description: Bulk operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkPickResponse'
        '401':
          description: Unauthorized - invalid signed fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - invalid metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/lists/{id}:
    get:
      tags:
        - Lists
      summary: Get favorites list details
      description: |
        Retrieves detailed information about a specific favorites list.
        
        Returns:
        - List name and description
        - Owner information
        - Privacy settings (public/private)
        - Item count
        - Creation and update timestamps
        
        Authentication may be required for private lists depending on access permissions.
      operationId: getListDetails
      security:
        - SignedFetch: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the favorites list
      responses:
        '200':
          description: List details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Lists
      summary: Update favorites list
      description: |
        Updates an existing favorites list's properties.
        
        **Authentication Required**: Only the list owner can update list details.
        
        Updatable fields:
        - List name
        - Description
        - Privacy settings (public/private)
      operationId: updateList
      security:
        - SignedFetch: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the favorites list to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListRequest'
      responses:
        '200':
          description: List updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '401':
          description: Unauthorized - invalid signed fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - invalid metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Lists
      summary: Delete favorites list
      description: |
        Permanently deletes a favorites list and all its picks.
        
        **Authentication Required**: Only the list owner can delete the list.
        
        **Warning**: This action is irreversible. All items in the list will be removed.
      operationId: deleteList
      security:
        - SignedFetch: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the favorites list to delete
      responses:
        '200':
          description: List deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '401':
          description: Unauthorized - invalid signed fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - invalid metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/lists:
    get:
      tags:
        - Lists
      summary: Get user's favorites lists
      description: |
        Retrieves all favorites lists owned by the authenticated user.
        
        **Authentication Required**: User must be authenticated to view their lists.
        
        Returns both public and private lists owned by the user, including:
        - List metadata (name, description, privacy settings)
        - Item counts
        - Creation and update timestamps
      operationId: getUserLists
      security:
        - SignedFetch: []
      responses:
        '200':
          description: User lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
        '401':
          description: Unauthorized - invalid signed fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - invalid metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Lists
      summary: Create new favorites list
      description: |
        Creates a new favorites list for the authenticated user.
        
        **Authentication Required**: User must be authenticated.
        
        When creating a list, specify:
        - List name (required)
        - Description (optional)
        - Privacy setting: public or private (required)
        
        Public lists can be viewed by anyone, while private lists are only accessible to the owner
        and users who have been granted explicit access.
      operationId: createList
      security:
        - SignedFetch: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListRequest'
      responses:
        '201':
          description: List created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '401':
          description: Unauthorized - invalid signed fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - invalid metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/lists/{id}/access:
    post:
      tags:
        - Lists
      summary: Grant access to private list
      description: |
        Grants a user access to a private favorites list.
        
        **Authentication Required**: Only the list owner can grant access.
        
        Use this endpoint to share private lists with specific users by providing their
        wallet address and desired permissions. This allows collaborative list management
        without making the list public.
      operationId: grantListAccess
      security:
        - SignedFetch: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the favorites list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantAccessRequest'
      responses:
        '200':
          description: Access granted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '401':
          description: Unauthorized - invalid signed fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - invalid metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Lists
      summary: Revoke access from private list
      description: |
        Revokes a user's access to a private favorites list.
        
        **Authentication Required**: Only the list owner can revoke access.
        
        After revocation, the specified user will no longer be able to view or modify
        the private list. Use this endpoint to manage access control for collaborative lists.
      operationId: revokeListAccess
      security:
        - SignedFetch: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the favorites list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeAccessRequest'
      responses:
        '200':
          description: Access revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '401':
          description: Unauthorized - invalid signed fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - invalid metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    SignedFetch:
      type: http
      scheme: bearer
      description: |
        Signed fetch authentication using decentraland-crypto-middleware with metadata validation (ADR-44l). 
        Requires auth chain headers (x-identity, x-signature, x-timestamp) for signature validation. 
        See http://adr.decentraland.org/adr/ADR-44l for details.
  schemas:
    CatalogResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CatalogItem'
          description: List of catalog items
        total:
          type: number
          description: Total number of items
      required:
        - items
        - total
    CatalogItem:
      type: object
      properties:
        id:
          type: string
          description: Item ID
        name:
          type: string
          description: Item name
        description:
          type: string
          description: Item description
        image:
          type: string
          description: Item image URL
        category:
          type: string
          description: Item category
        rarity:
          type: string
          description: Item rarity
        price:
          type: number
          description: Item price
        # TODO: align with precise source types - additional properties may exist
      additionalProperties: true
      required:
        - id
        - name
        - category
    WertSignRequest:
      type: object
      properties:
        transaction:
          type: object
          additionalProperties: true
          description: |
            Transaction data (TODO: align with precise source types)
        signature:
          type: string
          description: Transaction signature
      required:
        - transaction
    WertSignResponse:
      type: object
      properties:
        signedTransaction:
          type: string
          description: Signed transaction
        success:
          type: boolean
          description: Signing success status
      required:
        - signedTransaction
        - success
    TransakOrder:
      type: object
      properties:
        id:
          type: string
          description: Order ID
        status:
          type: string
          description: Order status
        amount:
          type: number
          description: Order amount
        currency:
          type: string
          description: Order currency
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
      required:
        - id
        - status
        - amount
        - currency
    ENSImageResponse:
      type: object
      properties:
        imageUrl:
          type: string
          description: Generated ENS image URL
        success:
          type: boolean
          description: Generation success status
      required:
        - imageUrl
        - success
    Trade:
      type: object
      properties:
        id:
          type: string
          description: Trade ID
        buyer:
          type: string
          description: Buyer address
        seller:
          type: string
          description: Seller address
        item:
          $ref: '#/components/schemas/Item'
        price:
          type: number
          description: Trade price
        status:
          type: string
          enum: [pending, completed, cancelled]
          description: Trade status
        createdAt:
          type: string
          format: date-time
          description: Trade creation timestamp
      required:
        - id
        - buyer
        - seller
        - price
        - status
    CreateTradeRequest:
      type: object
      properties:
        itemId:
          type: string
          description: Item ID
        price:
          type: number
          description: Trade price
        seller:
          type: string
          description: Seller address
      required:
        - itemId
        - price
        - seller
    TradeAcceptedEvent:
      type: object
      properties:
        tradeId:
          type: string
          description: Trade ID
        hashedSignature:
          type: string
          description: Hashed signature
        timestamp:
          type: string
          format: date-time
          description: Event timestamp
      required:
        - tradeId
        - hashedSignature
    Bid:
      type: object
      properties:
        id:
          type: string
          description: Bid ID
        bidder:
          type: string
          description: Bidder address
        item:
          $ref: '#/components/schemas/Item'
        amount:
          type: number
          description: Bid amount
        status:
          type: string
          enum: [active, accepted, rejected]
          description: Bid status
        createdAt:
          type: string
          format: date-time
          description: Bid creation timestamp
      required:
        - id
        - bidder
        - amount
        - status
    NFT:
      type: object
      properties:
        id:
          type: string
          description: NFT ID
        tokenId:
          type: string
          description: Token ID
        contract:
          type: string
          description: Contract address
        owner:
          type: string
          description: Owner address
        metadata:
          type: object
          description: NFT metadata
        price:
          type: number
          description: NFT price
      required:
        - id
        - tokenId
        - contract
        - owner
    Order:
      type: object
      properties:
        id:
          type: string
          description: Order ID
        maker:
          type: string
          description: Maker address
        taker:
          type: string
          description: Taker address
        item:
          $ref: '#/components/schemas/Item'
        price:
          type: number
          description: Order price
        status:
          type: string
          enum: [open, filled, cancelled]
          description: Order status
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
      required:
        - id
        - maker
        - price
        - status
    Item:
      type: object
      properties:
        id:
          type: string
          description: Item ID
        name:
          type: string
          description: Item name
        description:
          type: string
          description: Item description
        image:
          type: string
          description: Item image URL
        category:
          type: string
          description: Item category
        rarity:
          type: string
          description: Item rarity
        price:
          type: number
          description: Item price
        owner:
          type: string
          description: Item owner
      required:
        - id
        - name
        - category
    Sale:
      type: object
      properties:
        id:
          type: string
          description: Sale ID
        buyer:
          type: string
          description: Buyer address
        seller:
          type: string
          description: Seller address
        item:
          $ref: '#/components/schemas/Item'
        price:
          type: number
          description: Sale price
        timestamp:
          type: string
          format: date-time
          description: Sale timestamp
      required:
        - id
        - buyer
        - seller
        - price
    PricesResponse:
      type: object
      properties:
        prices:
          type: object
          description: Price data by category
        timestamp:
          type: string
          format: date-time
          description: Price timestamp
      required:
        - prices
    TrendingItem:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/Item'
        trendScore:
          type: number
          description: Trend score
        volume:
          type: number
          description: Trading volume
      required:
        - item
        - trendScore
    StatsResponse:
      type: object
      properties:
        category:
          type: string
          description: Statistics category
        stat:
          type: string
          description: Statistics type
        value:
          type: number
          description: Statistics value
        timestamp:
          type: string
          format: date-time
          description: Statistics timestamp
      required:
        - category
        - stat
        - value
    RankingsResponse:
      type: object
      properties:
        entity:
          type: string
          description: Entity type
        timeframe:
          type: string
          description: Timeframe
        rankings:
          type: array
          items:
            type: object
          description: Rankings data
      required:
        - entity
        - timeframe
        - rankings
    VolumeResponse:
      type: object
      properties:
        timeframe:
          type: string
          description: Timeframe
        volume:
          type: number
          description: Volume value
        timestamp:
          type: string
          format: date-time
          description: Volume timestamp
      required:
        - timeframe
        - volume
    Pick:
      type: object
      properties:
        id:
          type: string
          description: Pick ID
        itemId:
          type: string
          description: Item ID
        listId:
          type: string
          description: List ID
        user:
          type: string
          description: User address
        createdAt:
          type: string
          format: date-time
          description: Pick creation timestamp
      required:
        - id
        - itemId
        - listId
        - user
    AddPickRequest:
      type: object
      properties:
        itemId:
          type: string
          description: Item ID
      required:
        - itemId
    PickStats:
      type: object
      properties:
        itemId:
          type: string
          description: Item ID
        pickCount:
          type: number
          description: Number of picks
        listsCount:
          type: number
          description: Number of lists containing this item
      required:
        - itemId
        - pickCount
        - listsCount
    AllPicksStats:
      type: object
      properties:
        totalPicks:
          type: number
          description: Total number of picks
        totalItems:
          type: number
          description: Total number of items picked
        totalLists:
          type: number
          description: Total number of lists
      required:
        - totalPicks
        - totalItems
        - totalLists
    BulkPickRequest:
      type: object
      properties:
        action:
          type: string
          enum: [pick, unpick]
          description: Action to perform
        listIds:
          type: array
          items:
            type: string
          description: List of list IDs
      required:
        - action
        - listIds
    BulkPickResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Operation success status
        processed:
          type: number
          description: Number of items processed
      required:
        - success
        - processed
    List:
      type: object
      properties:
        id:
          type: string
          description: List ID
        name:
          type: string
          description: List name
        description:
          type: string
          description: List description
        owner:
          type: string
          description: List owner
        isPublic:
          type: boolean
          description: Whether list is public
        itemCount:
          type: number
          description: Number of items in list
        createdAt:
          type: string
          format: date-time
          description: List creation timestamp
      required:
        - id
        - name
        - owner
        - isPublic
        - itemCount
    CreateListRequest:
      type: object
      properties:
        name:
          type: string
          description: List name
        description:
          type: string
          description: List description
        isPublic:
          type: boolean
          description: Whether list should be public
      required:
        - name
        - isPublic
    UpdateListRequest:
      type: object
      properties:
        name:
          type: string
          description: List name
        description:
          type: string
          description: List description
        isPublic:
          type: boolean
          description: Whether list should be public
      required:
        - name
        - isPublic
    GrantAccessRequest:
      type: object
      properties:
        userAddress:
          type: string
          description: User address to grant access to
        permissions:
          type: array
          items:
            type: string
          description: List of permissions
      required:
        - userAddress
        - permissions
    RevokeAccessRequest:
      type: object
      properties:
        userAddress:
          type: string
          description: User address to revoke access from
      required:
        - userAddress
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
      required:
        - error
